type Mutation {
  createWaterDay(input: CreateWaterDayInput!): WaterDay
  deleteWaterDay(input: DeleteWaterDayInput!): WaterDay
  updateWaterDay(input: UpdateWaterDayInput!): WaterDay
}

type Query {
  getWaterDay(date: AWSDate!, userId: String!): WaterDay
  listWaterDays(filter: TableWaterDayFilterInput, limit: Int, nextToken: String): WaterDayConnection
}

type Subscription {
  onCreateWaterDay(cupsDrank: Int, date: AWSDate, id: ID, userId: String): WaterDay @aws_subscribe(mutations: ["createWaterDay"])
  onDeleteWaterDay(cupsDrank: Int, date: AWSDate, id: ID, userId: String): WaterDay @aws_subscribe(mutations: ["deleteWaterDay"])
  onUpdateWaterDay(cupsDrank: Int, date: AWSDate, id: ID, userId: String): WaterDay @aws_subscribe(mutations: ["updateWaterDay"])
}

type WaterDay {
  cupsDrank: Int
  date: AWSDate!
  id: ID!
  userId: String!
}

type WaterDayConnection {
  items: [WaterDay]
  nextToken: String
}

input CreateWaterDayInput {
  cupsDrank: Int
  date: AWSDate!
  id: ID!
  userId: String!
}

input DeleteWaterDayInput {
  date: AWSDate!
  userId: String!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input TableWaterDayFilterInput {
  cupsDrank: TableIntFilterInput
  date: TableStringFilterInput
  id: TableIDFilterInput
  userId: TableStringFilterInput
}

input UpdateWaterDayInput {
  cupsDrank: Int
  date: AWSDate!
  id: ID
  userId: String!
}
